#!/bin/bash
# postinst script for linuxmuster-ipfire
#
# thomas@linuxmuster.net
# 06.02.2013
# GPL v3
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#


case "$1" in
    configure)

	 [ -e /usr/share/linuxmuster/config/dist.conf ] && . /usr/share/linuxmuster/config/dist.conf

	 # do nothing if linuxmuster.net ist not yet installed
     [ -e "$INSTALLED" ] || exit 0

     . $HELPERFUNCTIONS
     SETUPSCRIPT="linuxmuster-ipfire --setup --first"

     if ! test_pwless_fw; then
      echo "You have to do first an initial setup of IPFire by inkoving"
      echo "# $SETUPSCRIPT"
      exit 0
     fi

	 # test if firewall is IPFire
	 if exec_ipcop /bin/ls /var/ipfire; then
	  echo "IPFire detected!"
	 else
	  echo "This is not an IPFire firewall!"
	  exit 1
	 fi
 
     # update linuxmuster.net scripts on IPFire
     echo -n "Uploading linuxmuster.net configuration scripts to IPFire ... "
     exec_ipcop /bin/rm -rf /var/linuxmuster
     put_ipcop /var/lib/linuxmuster-ipfire /var/linuxmuster ; RC="$?"
     if [ "$RC" = "0" ]; then
      echo "Ok!"
     else
      echo "Failed!"
      exit 1
     fi

     # repair outgoing rules file if necessary
     if ! exec_ipcop "/bin/grep \^\"ALLOW\;on\;allowedips\;\" /var/ipfire/outgoing/rules"; then
      echo -n "Repairing outgoing rules ... "
      exec_ipcop "/bin/sed -e \"s|@@serverip@@|$serverip|\" /var/linuxmuster/templates/outgoing/rules > /var/ipfire/outgoing/rules" ; RC="$?"
      if [ "$RC" = "0" ]; then
       fwout_reload=yes
       echo "Ok!"
      else
       echo "Failed!"
       exit 1
      fi
     fi

     # convert macs to ips for ip based external firewall
     searchstr="$(head -1 $BLOCKEDHOSTSINTERNET)"
     if validmac "$searchstr"; then
      echo "Converting blocked mac addresses to ips because external firewall has changed."
      macs="$(cat $BLOCKEDHOSTSINTERNET)"
      rm $BLOCKEDHOSTSINTERNET
      touch $BLOCKEDHOSTSINTERNET
      for i in $macs; do
       if validip "$i"; then
        echo "$i" >> $BLOCKEDHOSTSINTERNET
       else
        get_ip "$i"
        echo "$RET" >> $BLOCKEDHOSTSINTERNET
       fi
      done
      fwext_reload=yes
      fwout_reload=""
     fi
     
     # test for obsolete allowedmacs file
     if [ -e "$CACHEDIR/allowedmacs" ]; then
      rm -f "$CACHEDIR/allowedmacs"
      fwext_reload=yes
      fwout_reload=""
     fi

     # reload firewall     
     [ -n "$fwout_reload" ] && exec_ipcop /var/linuxmuster/reload_outgoing.sh
     [ -n "$fwext_reload" ] && $SCRIPTSDIR/internet_on_off.sh


     ;;

    abort-upgrade|abort-remove|abort-deconfigure)
	 ;;

    *)
     echo "postinst called with unknown argument \`$1'" >&2
     exit 1
     ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
